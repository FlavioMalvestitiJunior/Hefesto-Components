/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFModal;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.border.LineBorder;
import org.japura.modal.Modal;

/**
 *
 * @author flavio
 */
public class HFModalPainel extends javax.swing.JPanel {

    /**
     * Creates new form HefestoModalPainel
     */
    Boolean okButtonVisible = true;

    /**
     * Usar este modal quando for necessário confirmação do usuario.
     *
     * @param f tela em que o modal devera aparecer
     * @param titulo titulo do Modal
     * @param message testo do modal
     * @param enun modelo do modal ex: modal de erro informação ou questionario
     * @param evt evento que o ocorrerá ao apertar OK
     */
    public HFModalPainel(JFrame f, String titulo, String message, HFModalEnum enun, ActionListener evt) {
        initComponents();
        this.okButton.addActionListener(evt);
        setTipo(enun, evt);
        tituloModal.setText(titulo);
        descModal.setText(message);
        descModal.setBackground(new Color(242, 241, 240));
        descModal.setBorder(null);

        Modal.addModal(f, HFModalPainel.this);
        if (okButtonVisible = okButton.isVisible()) {
            okButton.grabFocus();
        } else {
            cancelButton.grabFocus();
        }
    }

    /**
     * Usar este modal quando for necessário confirmação do usuario.
     *
     * @param f tela em que o modal devera aparecer
     * @param titulo titulo do Modal
     * @param message testo do modal
     * @param enun modelo do modal ex: modal de erro informação ou questionario
     * @param evt evento que o ocorrerá ao apertar OK
     */
    public HFModalPainel(JInternalFrame f, String titulo, String message, HFModalEnum enun, ActionListener evt) {
        initComponents();
        this.okButton.addActionListener(evt);
        setTipo(enun, evt);
        tituloModal.setText(titulo);
        descModal.setText(message);
        descModal.setBackground(new Color(242, 241, 240));
        descModal.setBorder(null);

        Modal.addModal(f, HFModalPainel.this);
        if (okButtonVisible = okButton.isVisible()) {
            okButton.grabFocus();
        } else {
            cancelButton.grabFocus();
        }
    }

    /**
     * Usar este modal quando for necessário somente informar algo ao usuário.
     *
     * @param f tela em que o modal devera aparecer
     * @param titulo titulo do Modal
     * @param message testo do modal
     * @param enun modelo do modal ex: modal de erro informação ou questionario
     */
    public HFModalPainel(JFrame f, String titulo, String message, HFModalEnum enun) {
        initComponents();
        setTipo(enun, null);
        tituloModal.setText(titulo);
        descModal.setText(message);
        descModal.setBackground(new Color(242, 241, 240));
        descModal.setBorder(null);

        Modal.addModal(f, this);
        if (okButtonVisible = okButton.isVisible()) {
            okButton.grabFocus();
        } else {
            cancelButton.grabFocus();
        }
    }

    /**
     * Usar este modal quando for necessário somente informar algo ao usuário.
     *
     * @param f tela em que o modal devera aparecer
     * @param titulo titulo do Modal
     * @param message testo do modal
     * @param enun modelo do modal ex: modal de erro informação ou questionario
     */
    public HFModalPainel(JInternalFrame f, String titulo, String message, HFModalEnum enun) {
        initComponents();
        setTipo(enun, null);
        tituloModal.setText(titulo);
        descModal.setText(message);
        descModal.setBackground(new Color(242, 241, 240));
        descModal.setBorder(null);

        Modal.addModal(f, this);
        if (okButtonVisible = okButton.isVisible()) {
            okButton.grabFocus();
        } else {
            cancelButton.grabFocus();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        tituloModal = new javax.swing.JLabel();
        imagenModal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descModal = new javax.swing.JEditorPane();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 94, 160), 5));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        tituloModal.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        tituloModal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloModal.setText("jLabel1");

        imagenModal.setMaximumSize(new java.awt.Dimension(128, 128));
        imagenModal.setMinimumSize(new java.awt.Dimension(128, 128));
        imagenModal.setPreferredSize(new java.awt.Dimension(80, 80));

        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        descModal.setEditable(false);
        descModal.setBorder(null);
        descModal.setDisabledTextColor(new java.awt.Color(60, 60, 60));
        jScrollPane1.setViewportView(descModal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagenModal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 157, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addComponent(tituloModal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tituloModal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(imagenModal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        Modal.closeModal(this);

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        Modal.closeModal(this);
    }//GEN-LAST:event_okButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void setTipo(HFModalEnum enun, ActionListener evt) {
        if (enun != HFModalEnum.QUESTION_MODAL) {
            if (enun == HFModalEnum.CANCEL_MODAL) {
                this.setBorder(new LineBorder(new Color(204, 0, 0), 5));
            }
            okButton.setVisible(false);
            cancelButton.setText("OK");
            if (evt != null) {
                cancelButton.addActionListener(evt);
            }
            okButtonVisible = okButton.isVisible();
        } else {
            okButton.setVisible(true);
            okButtonVisible = okButton.isVisible();
        }
        ImageIcon icon = new ImageIcon(new ImageIcon(getClass().getResource("/imagens/" + enun.getCodigo() + ".png").getPath()).getImage().getScaledInstance(80, 80, Image.SCALE_SMOOTH));
        imagenModal.setIcon(icon);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JEditorPane descModal;
    private javax.swing.JLabel imagenModal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel tituloModal;
    // End of variables declaration//GEN-END:variables
}
