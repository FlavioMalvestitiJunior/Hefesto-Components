/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFUtils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

/**
 *
 * @author jr
 */
public class ZipUtil {

    /**
     * Faz a compactação do Objeto
     *
     * @param arqEntrada
     * @return
     * @throws Exception
     */
    public static byte[] Compactar(Object arqEntrada) throws Exception {
        byte[] input;
        ByteArrayOutputStream outp = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(outp);
        oos.writeObject(arqEntrada);
        oos.close();
        outp.close();
        input = outp.toByteArray();
        Deflater df = new Deflater();       //this function mainly generate the byte code
        df.setLevel(Deflater.BEST_COMPRESSION);
        df.setInput(input);
        outp = new ByteArrayOutputStream(input.length);   //we write the generated byte code in this array
        df.finish();
        byte[] buff = new byte[1024];   //segment segment pop....segment set 1024
        while (!df.finished()) {
            int count = df.deflate(buff); //returns the generated code... index    
            outp.flush();
            outp.write(buff, 0, count);     //write 4m 0 to count]

        }
        outp.close();
        byte[] output = outp.toByteArray();
        return output;
    }

    /**
     * Faz a Descompactação do Objeto
     *
     * @param input
     * @return
     * @throws Exception
     */
    private static Object DescompactaPrivate(byte[] input) {

        try {
            Inflater ifl = new Inflater();   //mainly generate the extraction
            //df.setLevel(Deflater.BEST_COMPRESSION);
            ifl.setInput(input);

            ByteArrayOutputStream baos = new ByteArrayOutputStream(input.length);
            byte[] buff = new byte[1024];
            while (!ifl.finished()) {
                int count = ifl.inflate(buff);
                baos.write(buff, 0, count);
                baos.flush();
            }
            baos.close();
            byte[] output = baos.toByteArray();
            ByteArrayInputStream bai = new ByteArrayInputStream(output);
            ObjectInputStream ois = new ObjectInputStream(bai);
            Object ob = ois.readObject();
            ois.close();
            bai.close();
            return ob;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public static <T> T Descompacta(byte[] input) throws Exception {
        if (input == null) {
            return null;
        }
        return (T) DescompactaPrivate(input);
    }
}
