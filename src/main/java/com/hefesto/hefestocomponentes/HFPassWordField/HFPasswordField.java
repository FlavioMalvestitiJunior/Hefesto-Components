/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFPassWordField;

import com.hefesto.hefestocomponentes.HFUtils.Messages;
import com.hefesto.hefestocomponentes.HFUtils.PassWordSecurity;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.Serializable;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.border.Border;

/**
 *
 * @author flavio
 */
public class HFPasswordField extends JPasswordField {

    /**
     * Creates new form HFPasswordField
     */
    JLabel label;
    ImageIcon im;
    Border borda;

    public HFPasswordField() {
        initComponents();
        label = new JLabel();
        borda = this.getBorder();
        label.setSize(15, 15);
        label.setToolTipText(Messages.getMessage("hfpasswordfield.capslock.ativado"));
        im = new ImageIcon(new ImageIcon(getClass().getResource("/imagens/up.png").getPath())
                .getImage().getScaledInstance(15, 15, Image.SCALE_SMOOTH));
        this.setLayout(new BorderLayout());
        addKeyListener(new PasswordKeyListener());
        label.setIcon(im);
        label.setVisible(false);
        this.add(label, BorderLayout.EAST);
        label.setVisible(isCapsLockAtivada());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(28, 28));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        label.setVisible(isCapsLockAtivada());
    }//GEN-LAST:event_formFocusGained
    /**
     * remove os alertas de erro menos o CapsLock.
     */
    public void removeAlerts() {
        this.setBorder(borda);
        label.setVisible(isCapsLockAtivada());
        if (isCapsLockAtivada()) {
            label.setToolTipText(Messages.getMessage("hfpasswordfield.capslock.ativado"));
            label.setIcon(im);
        }
    }

    public class PasswordKeyListener implements Serializable, KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e) {
            if (isCapsLockAtivada()) {
                label.setIcon(im);
                label.setVisible(true);
                grabFocus();
            } else {
                label.setVisible(false);
                grabFocus();
            }
        }
    }

    /**
     * Verifica se o CapsLock esta on
     *
     * @return
     */
    private static Boolean isCapsLockAtivada() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        try {
            return tk.getLockingKeyState(KeyEvent.VK_CAPS_LOCK);
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Retorna a Senha encriptada.
     *
     * @return
     * @throws Exception
     */
    public String getSenha() throws Exception {
        String senha = String.valueOf(getPassword());
        return PassWordSecurity.encrypt(senha);
    }

    public boolean valida() {
        if (this.getPassword().length <= 0) {
            
            label.setIcon(new ImageIcon(new ImageIcon(getClass().getResource("/imagens/cancel.png").getPath()).getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH)));
            label.setVisible(true);
            label.setToolTipText(Messages.getMessage("hfpasswordfield.senha.embranco"));

            return false;
        }
        removeAlerts();
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
