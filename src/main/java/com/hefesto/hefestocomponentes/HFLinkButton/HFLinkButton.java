/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HFLinkButton.java
 *
 * Created on 23/02/2009, 17:02:07
 */

package com.hefesto.hefestocomponentes.HFLinkButton;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.io.Serializable;
import javax.swing.JToggleButton;

/**
 * Bot�o em forma de Link, usar para criar os menus
 * @author Rafael Felix
 * @version 1.1
 */
public class HFLinkButton extends JToggleButton implements Serializable {

    private String textoOriginal;
    private ActionListener favoritosAction, removerAction;
    private Boolean showPopup = false;
    
    /** Creates new form BeanForm */
    public HFLinkButton() {
        initComponents();
        trocaRemover(false);
        setShowPopup(showPopup);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        favoritos = new javax.swing.JMenuItem();
        remover = new javax.swing.JMenuItem();

        favoritos.setText("Adicionar aos Favoritos");
        favoritos.setToolTipText("Adiciona essa tela aos favoritos");
        popup.add(favoritos);

        remover.setText("Remover Favorito");
        popup.add(remover);

        setBorderPainted(false);
        setComponentPopupMenu(popup);
        setContentAreaFilled(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.setCursor(new Cursor(Cursor.HAND_CURSOR));
        textoOriginal = getText();
        setText("<html><u>"+getText()+"</u></html>");
        //updateUI();
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
       this.setCursor(Cursor.getDefaultCursor());
       this.setText(textoOriginal);
    }//GEN-LAST:event_formMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem favoritos;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JMenuItem remover;
    // End of variables declaration//GEN-END:variables
    /**
     * Recupera a a��o do bot�o de favoritos
     * @return ActionListener do bot�o
     * @since 1.1
     */
    public ActionListener getFavoritosAction() {
        return favoritosAction;
    }
    /**
     * Define uma nova a��o ao bot�o.
     * @param favoritosAction
     * @since 1.1
     */
    public void setFavoritosAction(ActionListener favoritosAction) {
        this.favoritosAction = favoritosAction;
        favoritos.addActionListener(favoritosAction);
    }
    /**
     * Recupera se o popup esta sendo mostrado
     * @return true caso o popup seja mostrado
     * @since 1.1
     */
    public Boolean isShowPopup() {
        return showPopup;
    }
    /**
     * Define se o popup pode ser mostrado
     * @param showPopup true para mostrar
     */
    public void setShowPopup(Boolean showPopup) {
        this.showPopup = showPopup;
        if(showPopup){
            setComponentPopupMenu(popup);
        }else{
            setComponentPopupMenu(null);
        }
    }

    /**
     *
     * @return
     */
    public ActionListener getRemoverAction() {
        return removerAction;
    }

    /**
     *
     * @param removerAction
     */
    public void setRemoverAction(ActionListener removerAction) {
        this.removerAction = removerAction;
        remover.addActionListener(removerAction);
    }

    /**
     *
     * @param estado
     */
    public void trocaAdicionar(Boolean estado){
        favoritos.setVisible(estado);
    }

    /**
     *
     * @param estado
     */
    public void trocaRemover(Boolean estado){
        remover.setVisible(estado);
        trocaAdicionar(!estado);
    }

}
