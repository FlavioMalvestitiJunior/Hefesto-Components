/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFTextField;

import com.hefesto.hefestocomponentes.HFImagenLoader.HFImageLoader;
import com.hefesto.hefestocomponentes.HFUtils.HFImageComponents;
import com.hefesto.hefestocomponentes.HFUtils.HFNumCaracteres;
import com.hefesto.hefestocomponentes.HFUtils.Messages;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.awt.Insets;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import net.java.balloontip.BalloonTip;
import net.java.balloontip.styles.RoundedBalloonStyle;
import net.java.balloontip.utils.TimingUtils;

/**
 *
 * @author flavio
 */
public class HFTextField extends javax.swing.JTextField {

    /**
     * Creates new form HFTextField
     */
    RoundedBalloonStyle balloonStyle;
    Border borda;
    JLabel error;
    HFImageLoader im;
    private Integer MaxLength = 0;
    private Boolean Requerido = false;
    private Boolean Numero = false;
    private Boolean Maiusculo = false;
    private Boolean PrimeiraMaiuscula = false;
    private HFNumCaracteres Document = new HFNumCaracteres();

    public Boolean isNumero() {
        return Numero;
    }

    public void setNumero(Boolean Numero) {
        this.Numero = Numero;
        Document.setiNumber(this.Numero);
    }

    public Integer getMaxLength() {
        return MaxLength;
    }

    public void setMaxLength(Integer MaxLength) {
        this.MaxLength = MaxLength;
        Document.setiMaxLength(this.MaxLength);
    }

    public Boolean isRequerido() {
        return Requerido;
    }

    public void setRequerido(Boolean Requerido) {
        this.Requerido = Requerido;
    }

    public Boolean isMaiusculo() {
        return Maiusculo;
    }

    public void setMaiusculo(Boolean Maiusculo) {
        this.Maiusculo = Maiusculo;
        if (Maiusculo) {
            setPrimeiraMaiuscula(!Maiusculo);
        }
        Document.setiUpper(this.Maiusculo);
    }

    public Boolean isPrimeiraMaiuscula() {
        return PrimeiraMaiuscula;

    }

    public void setPrimeiraMaiuscula(Boolean PrimeiraMaiuscula) {
        this.PrimeiraMaiuscula = PrimeiraMaiuscula;
        if (PrimeiraMaiuscula) {
            setMaiusculo(!PrimeiraMaiuscula);
        }
        Document.setiPrimMaiuscula(PrimeiraMaiuscula);
    }

    public HFTextField() {
        super();
        initComponents();
        this.setDocument(Document);
        im = new HFImageLoader(this.getClass());
        error = new JLabel();
        this.setLayout(new BorderLayout());
        this.add(error, BorderLayout.EAST);
        error.setSize(27, 27);
        error.setVisible(false);
        error.setHorizontalAlignment(CENTER);
        error.setVerticalAlignment(CENTER);
        borda = this.getBorder();

        balloonStyle = new RoundedBalloonStyle(0, 0, Color.LIGHT_GRAY, Color.DARK_GRAY);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoscrolls(false);
        setMinimumSize(new java.awt.Dimension(10, 28));
        setPreferredSize(new java.awt.Dimension(28, 28));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        error.setVisible(false);
        this.setBorder(borda);
    }//GEN-LAST:event_formFocusGained
    /**
     * Valida Simples sem Chkmark
     *
     * @return
     */
    public Boolean Valida() {
        return Valida(false);
    }

    /**
     * Valida mais Simples ainda sem Chkmark e sem mensagem
     *
     * @return
     */
    public Boolean valida() {
        return !this.getText().trim().isEmpty();
    }

    /**
     * Valida se o campo não esta em branco.
     *
     * @param chkmark
     * @return
     */
    public Boolean Valida(Boolean chkmark) {
        try {

            if (this.getText().trim().isEmpty()) {
                BalloonTip ballon = new BalloonTip(HFTextField.this,
                        Messages.getMessage("hftextfield.valida.branco"),
                        balloonStyle, false);
                TimingUtils.showTimedBalloon(ballon, 3000);
                error.setIcon(im.getResizedImage(HFImageComponents.CROSS, 21, 21, Image.SCALE_SMOOTH));
                error.setVisible(true);
                Insets i = this.getMargin();
                this.setBorder(BorderFactory.createCompoundBorder(new LineBorder(Color.RED),
                        BorderFactory.createEmptyBorder(TOP + 2, LEFT + 2,
                                BOTTOM + 2, RIGHT + 2)));
                this.setMargin(i);
                return false;
            }
            if (chkmark) {
                error.setIcon(im.getResizedImage(HFImageComponents.CHECKMARK, 21, 21, Image.SCALE_SMOOTH));
                error.setVisible(true);
            }
            this.setBorder(borda);
            return true;
        } catch (Exception ex) {
            this.setBorder(new LineBorder(Color.RED));
            return false;
        }
    }

    /**
     * Mostra a Mensagem personalizada para validação.
     *
     * @param chkmark
     * @param valida
     * @param msg
     * @return
     * @throws Exception
     */
    public Boolean ValidaMSG(Boolean chkmark, Boolean valida, String msg) throws Exception {
        if (!valida) {
            BalloonTip ballon = new BalloonTip(this, Messages.getMessage(msg), balloonStyle, false);
            TimingUtils.showTimedBalloon(ballon, 3000);
            this.setBorder(new LineBorder(Color.RED));
            error.setIcon(im.getResizedImage(HFImageComponents.CROSS, 21, 21, Image.SCALE_SMOOTH));
            error.setVisible(true);
            return false;
        }
        if (chkmark) {
            error.setIcon(im.getResizedImage(HFImageComponents.CHECKMARK, 21, 21, Image.SCALE_SMOOTH));
            error.setVisible(true);
        }
        this.setBorder(borda);
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
