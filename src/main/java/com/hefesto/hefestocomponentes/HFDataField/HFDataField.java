/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFDataField;

import com.hefesto.hefestocomponentes.HFBaloon.HFBallonUtil;
import com.hefesto.hefestocomponentes.HFCalendar.HFCalendar;
import com.hefesto.hefestocomponentes.HFUtils.Messages;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JPopupMenu;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import net.java.balloontip.BalloonTip;
import net.java.balloontip.styles.RoundedBalloonStyle;
import net.java.balloontip.utils.TimingUtils;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

/**
 *
 * @author Flavio
 */
public class HFDataField extends JFormattedTextField implements Serializable{

    /**
     * Creates new form HFDataField
     */
    JPopupMenu menu;
    Boolean isTime = false;
    Boolean calendarioAberto = false;
    Date DATA;
    Border borda;
    private Boolean somenteMes = false;

    public HFDataField() throws ParseException {
        initComponents();
        calendarButton.setSize(25, 25);
        calendarButton.setPreferredSize(new Dimension(25, 25));
        calendarButton.setMaximumSize(new Dimension(25, 25));
        calendarButton.setMinimumSize(new Dimension(25, 25));
        this.setLayout(new BorderLayout());
        this.add(calendarButton, BorderLayout.EAST);
        menu = new JPopupMenu();
        menu.setSize(332, 251);
        menu.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent e) {
                HFDataField.this.menu.setVisible(false);
            }
        });
        this.setFocusLostBehavior(JFormattedTextField.PERSIST);
        setMascara();
        this.borda = this.getBorder();
        calendarButton.setEnabled(this.isEditable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jXTextField1 = new org.jdesktop.swingx.JXTextField();

        calendarButton.setBackground(new java.awt.Color(255, 255, 255));
        calendarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/calendar.png"))); // NOI18N
        calendarButton.setFocusable(false);
        calendarButton.setMaximumSize(null);
        calendarButton.setMinimumSize(null);
        calendarButton.setPreferredSize(null);
        calendarButton.setRequestFocusEnabled(false);
        calendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calendarButtonActionPerformed(evt);
            }
        });

        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPanel1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 212, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        jXTextField1.setText("jXTextField1");

        setMinimumSize(new java.awt.Dimension(10, 28));
        setPreferredSize(new java.awt.Dimension(38, 28));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                formInputMethodTextChanged(evt);
            }
        });
        addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formActionPerformed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void calendarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calendarButtonActionPerformed
        calendarAction();
    }//GEN-LAST:event_calendarButtonActionPerformed

    private void jPanel1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusLost

    }//GEN-LAST:event_jPanel1FocusLost

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (isEditable()) {
            Character tipo = new Character('N');
            Integer posicao = this.getCaretPosition();
            if (posicao >= 0 && posicao <= 2) {
                tipo = 'D';
            } else if (posicao >= 3 && posicao <= 5) {
                tipo = 'M';
            } else if (posicao >= 6 && posicao <= 10) {
                tipo = 'A';
            } else if (posicao >= 11 && posicao <= 13) {
                tipo = 'h';
            } else if (posicao >= 14 && posicao <= 17) {
                tipo = 'm';
            }

            DateTime dataAtualizar = null;
            if (KeyEvent.getKeyText(evt.getKeyCode()).toUpperCase().equals("H")) {
                dataAtualizar = new DateTime(new Date());
            } else {
                // verifica a tecla pressionada
                if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    dataAtualizar = getDate() != null ? new DateTime(getDate()) : new DateTime(new Date());
                    switch (tipo) {
                        case 'D':
                            dataAtualizar = dataAtualizar.plusDays(1);
                            break;
                        case 'M':
                            dataAtualizar = dataAtualizar.plusMonths(1);
                            break;
                        case 'A':
                            dataAtualizar = dataAtualizar.plusYears(1);
                            break;
                        case 'h':
                            dataAtualizar = dataAtualizar.plusHours(1);
                            break;
                        case 'm':
                            dataAtualizar = dataAtualizar.plusMinutes(1);
                            break;
                    }
                } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                    dataAtualizar = getDate() != null ? new DateTime(getDate()) : new DateTime(new Date());
                    switch (tipo) {
                        case 'D':
                            dataAtualizar = dataAtualizar.minusDays(1);
                            break;
                        case 'M':
                            dataAtualizar = dataAtualizar.minusMonths(1);
                            break;
                        case 'A':
                            dataAtualizar = dataAtualizar.minusYears(1);
                            break;
                        case 'h':
                            dataAtualizar = dataAtualizar.minusHours(1);
                            break;
                        case 'm':
                            dataAtualizar = dataAtualizar.minusMinutes(1);
                            break;
                    }
                } else {
                    dataAtualizar = null;
                }
            }

            if (somenteMes) {
                if (!tipo.equals('M') || (KeyEvent.getKeyText(evt.getKeyCode()).toUpperCase().equals("H"))) {
                    //DateTime dataAtual = getDate() != null ? new DateTime(getDate()) : null;
                    //System.out.println(DATA);
                    dataAtualizar = new DateTime(DATA);
                    tipo = 'M';
                }
            }

            if (dataAtualizar != null) {
                setDate(dataAtualizar.toDate());
                setCaretPosition(posicao);
                switch (tipo) {
                    case 'D':
                        select(0, 2);
                        break;
                    case 'M':
                        select(3, 5);
                        break;
                    case 'A':
                        select(6, 10);
                        break;
                    case 'h':
                        select(11, 13);
                        break;
                    case 'm':
                        select(14, 17);
                        break;
                }
            }

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        this.setBorder(borda);
    }//GEN-LAST:event_formFocusGained

    private void formActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formActionPerformed


    }//GEN-LAST:event_formActionPerformed

    private void formInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_formInputMethodTextChanged

    }//GEN-LAST:event_formInputMethodTextChanged
    private void calendarAction() {
        if (!calendarioAberto) {

            menu.setBackground(new Color(102, 102, 102));
            menu.setLocation(calendarButton.getLocationOnScreen());
            HFCalendar calendar = new HFCalendar(menu, this, getLocalDate());
            menu.add(calendar);
            menu.setVisible(true);
            calendarioAberto = true;
        } else {
            menu.removeAll();
            menu.setVisible(false);
            menu.removeAll();
            calendarioAberto = false;
        }
    }

    private void setMascara() {

        if (!isTime()) {
            try {
                this.setFormatterFactory(null);
                javax.swing.text.MaskFormatter format = new javax.swing.text.MaskFormatter("##/##/####");
                this.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(format));
                this.setValue(null);
                format = null;
            } catch (ParseException ex) {
                Logger.getLogger(HFDataField.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                this.setFormatterFactory(null);
                javax.swing.text.MaskFormatter format = new javax.swing.text.MaskFormatter("##/##/#### ##:##");
                this.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(format));
                this.setValue(null);
                format = null;
            } catch (ParseException ex) {
                Logger.getLogger(HFDataField.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public Boolean isTime() {
        return isTime;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calendarButton;
    private javax.swing.JPanel jPanel1;
    private org.jdesktop.swingx.JXTextField jXTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * Seta a Data do Componente
     *
     * @param date
     */
    public void setDate(String texto) {
        if (texto != null) {
            if (!isTime()) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String Valor_Data = texto;
                    DATA = sdf.parse(Valor_Data);
                    sdf.applyPattern("dd/MM/yyyy");
                    Valor_Data = sdf.format(DATA);
                    this.setText(Valor_Data);
                    this.setValue(Valor_Data);
                    sdf = null;
                    Valor_Data = null;
                } catch (Exception ex) {
                    this.setText(texto);
                }
            } else {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                    String Valor_Data = texto;
                    DATA = sdf.parse(Valor_Data);
                    sdf.applyPattern("dd/MM/yyyy HH:mm");
                    Valor_Data = sdf.format(DATA);
                    this.setText(Valor_Data);
                    this.setValue(Valor_Data);
                    sdf = null;
                    Valor_Data = null;
                } catch (Exception ex) {
                    this.setText(texto);
                }
            }
        }
        ajustaSomenteMes();
    }

    public void setDate(Date texto) {
        if (texto != null) {
            if (!isTime()) {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String Valor_Data = null;
                    sdf.applyPattern("dd/MM/yyyy");
                    Valor_Data = sdf.format(texto);
                    this.setText(Valor_Data);
                    this.setValue(Valor_Data);
                    sdf = null;
                    Valor_Data = null;
                } catch (Exception ex) {
                    //this.setText(texto);
                }
            } else {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                    String Valor_Data = null;
                    sdf.applyPattern("dd/MM/yyyy HH:mm");
                    Valor_Data = sdf.format(texto);
                    this.setText(Valor_Data);
                    this.setValue(Valor_Data);
                    sdf = null;
                    Valor_Data = null;
                } catch (Exception ex) {
                    //this.setText(texto);
                }
            }
        } else {
            setText("");
            setValue(null);
        }
        ajustaSomenteMes();
    }

    public Date getDate() {
        if (!isTime()) {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String Valor_Data = this.getText();
            try {
                sdf.setLenient(false);
                DATA = sdf.parse(Valor_Data);
            } catch (ParseException ex) {
                //ex.printStackTrace();
                this.setText("");
                this.setValue(null);
                Valor_Data = null;
                sdf = null;
                return null;
            }
            Valor_Data = null;
            sdf = null;
            return DATA;
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            String Valor_Data = this.getText();
            try {
                sdf.setLenient(false);
                DATA = sdf.parse(Valor_Data);
            } catch (ParseException ex) {
                this.setText("");
                this.setValue(null);
                Valor_Data = null;
                sdf = null;
                return null;
            }
            Valor_Data = null;
            sdf = null;
            return DATA;
        }
    }

    /**
     * Retorna a data do componente
     *
     * @return
     */
    private LocalDate getLocalDate() {
        getDate();
        if (DATA != null) {
            String[] data = this.getText().split("/");
            System.out.println(data[0]);
            LocalDate d = new LocalDate(Integer.parseInt(data[2]), Integer.parseInt(data[1]), Integer.parseInt(data[0]));
            //LocalDate d = new LocalDate(getDate());
            return d;
        }
        return null;
    }

    public Boolean valida() {
        Boolean valido = isValido();
        if (!valido) {
            BalloonTip balloon = new BalloonTip(HFDataField.this, Messages.getMessage("data.invalida"),
                    new RoundedBalloonStyle(WIDTH, HEIGHT, Color.LIGHT_GRAY, Color.DARK_GRAY), false);
            TimingUtils.showTimedBalloon(balloon, 3000);
            this.setBorder(new LineBorder(Color.RED));
        } else {
            this.setBorder(borda);
        }

        return valido;
//
    }

    /**
     * Valida a data do campo.
     *
     * @return
     */
    public boolean isValido() {
        Boolean valido = false;
        try {
            valido = getFormatter().stringToValue(this.getText()) != null && getDate() != null;
        } catch (ParseException ex) {
            valido = false;
        }
        return valido;
    }

    @Override
    public void setEditable(boolean b) {
        super.setEditable(b);
        if (calendarButton != null) {
            calendarButton.setEnabled(this.isEditable());
        }
    }

    private final SimpleDateFormat formatoDia = new SimpleDateFormat("dd");
    private final SimpleDateFormat formatoMes = new SimpleDateFormat("MM");
    private final SimpleDateFormat formatoAno = new SimpleDateFormat("yyyy");
    private final SimpleDateFormat formatoAnoMes = new SimpleDateFormat("yyyyMM");
    private final SimpleDateFormat formatoPeriodo = new SimpleDateFormat("MM/yyyy");

    /**
     * Retorna o dia da data informada.
     *
     * @return dia ou null caso não tenha data preenchida
     */
    public Integer getDia() {
        return getDate() == null ? null : Integer.parseInt(formatoDia.format(getDate()));
    }

    /**
     * Retorna o mes da data informada.
     *
     * @return mes ou null caso não tenha data preenchida
     */
    public Integer getMes() {
        return getDate() == null ? null : Integer.parseInt(formatoMes.format(getDate()));
    }

    /**
     * Retorna o ano da data informada.
     *
     * @return ano ou null caso não tenha data preenchida
     */
    public Integer getAno() {
        return getDate() == null ? null : Integer.parseInt(formatoAno.format(getDate()));
    }

    /**
     * Retorna o dia como string 1 = 01 da data informada.
     *
     * @return dia ou null caso não tenha data preenchida
     */
    public String getDiaAsString() {
        return getDate() == null ? null : formatoDia.format(getDate());
    }

    /**
     * Retorna o mes como string 1 = 01 da data informada.
     *
     * @return mes ou null caso não tenha data preenchida
     */
    public String getMesAsString() {
        return getDate() == null ? null : formatoMes.format(getDate());
    }

    /**
     * Retorna o ano como string 1 = 01 da data informada.
     *
     * @return ano ou null caso não tenha data preenchida
     */
    public String getAnoAsString() {
        return getDate() == null ? null : formatoAno.format(getDate());
    }

    public Long getAnoMes() {
        return getDate() == null ? null
                : Long.parseLong(formatoAnoMes.format(getDate()));
    }

    public String getAnoMesAsString() {
        return getDate() == null ? null
                : formatoAnoMes.format(getDate());
    }

    public String getPeriodo() {
        return getDate() == null ? null
                : formatoPeriodo.format(getDate());
    }

    public Boolean getSomenteMes() {
        return somenteMes;
    }

    public void setSomenteMes(Boolean somenteMes) {
        this.somenteMes = somenteMes;
        ajustaSomenteMes();
    }

    public void ajustaSomenteMes() {
        calendarButton.setEnabled(!somenteMes && this.isEditable());
        if (somenteMes) {
            HFBallonUtil.showTimedBallon(this, Messages.getMessage("valor.somente.mes"), null);
            if (getDate() != null) {
                super.setEnabled(true);
            } else {
                super.setEnabled(false);
            }
        } else {
            super.setEnabled(true);
        }
    }

}
