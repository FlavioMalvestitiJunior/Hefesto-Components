/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hefesto.hefestocomponentes.HFTreeTable;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.JXTreeTable;
import org.jdesktop.swingx.treetable.TreeTableModel;

/**
 *
 * @author Flavio
 */
public class HFTreeTable extends JXTreeTable {

    /**
     * Creates new form HFTreeTable
     */
    String[] colunas = new String[]{"Coluna1", "Coluna2"};
    DefaultMutableTreeNode rootNode;

    public HFTreeTable() throws Exception {
        initComponents();
        this.setBackground(new Color(250, 250, 255));
        this.setHighlighters(HFHiglighterFactory.createSimpleStriping(HFHiglighterFactory.HEFESTO));
        this.setSelectionBackground(new Color(26, 189, 255));
        this.setSelectionForeground(Color.WHITE);
        this.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.setTreeCellRenderer(new HFTreeTableCellRenderer());
        this.getTableHeader().setReorderingAllowed(false);
        setModel();

    }

    public void setColunas(String[] colunas) {
        this.colunas = colunas;
        setModel();

    }

    private void setModel() {
        List<Object> col = new ArrayList<Object>();
        for (String st : colunas) {
            col.add(st);
        }
        rootNode = new DefaultMutableTreeNode(new HFRowData(col, true), true);

        HFTreeModel model = new HFTreeModel(rootNode, colunas);
        super.setTreeTableModel(model);
    }

    public void inserirTabela(DefaultMutableTreeNode roots) {
        rootNode = roots;
        HFTreeModel model = new HFTreeModel(rootNode, colunas);
        super.setTreeTableModel(model);
        this.expandOrCollapsToLevel(this, this.getPathForRow(0).getParentPath(), 0, true);
        super.updateUI();
    }

    public void addNodeInSelectedNode(HFRowData data) {
        int row = this.getSelectedRow();

// get full path for the selected row
        TreePath path = this.getPathForRow(row);

// finally, get the object for the last path component
        Object lpc = path.getLastPathComponent();

// cast that object to proper node object
        DefaultMutableTreeNode selNode = (DefaultMutableTreeNode) lpc;

// create a new node
        DefaultMutableTreeNode nuevo = new DefaultMutableTreeNode(data);

// add it to selNode
        if (((HFRowData) selNode.getUserObject()).isCanAdd()) {
            selNode.add(nuevo);
        }
// notify changes in TreeTableModel, so JXTreeTable gets updated
        //hFTreeTable4.getTreeTableModel().notify();//nodeStructureChanged(nodo);
        this.updateUI();

    }

    public void expandOrCollapsToLevel(HFTreeTable tree, TreePath treePath, int level, boolean expand) {
        try {
            expandOrCollapsePath(tree, treePath, level, 0, expand);
        } catch (Exception e) {
            e.printStackTrace();
            //do nothing
        }
    }

    public void expandOrCollapsePath(HFTreeTable tree, TreePath treePath, int level, int currentLevel, boolean expand) {
//      System.err.println("Exp level "+currentLevel+", exp="+expand);
        if (expand && level <= currentLevel && level > 0) {
            return;
        }

        DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) treePath.getLastPathComponent();
        TreeTableModel treeModel = tree.getTreeTableModel();
        if (treeModel.getChildCount(treeNode) >= 0) {
            for (int i = 0; i < treeModel.getChildCount(treeNode); i++) {
                TreeNode n = (TreeNode) treeModel.getChild(treeNode, i);
                TreePath path = treePath.pathByAddingChild(n);
                expandOrCollapsePath(tree, path, level, currentLevel + 1, expand);
            }
            if (!expand && currentLevel < level) {
                return;
            }
        }
        if (expand) {
            tree.expandPath(treePath);
//         System.err.println("Path expanded at level "+currentLevel+"-"+treePath);
        } else {
            tree.collapsePath(treePath);
//         System.err.println("Path collapsed at level "+currentLevel+"-"+treePath);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoCreateRowSorter(true);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
